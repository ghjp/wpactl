#! /bin/bash

_wpactl_bash_autocomplete() {
  local CMDS_REQUIRE_IFACE='status st up down dn scan sc scan-results sr scr reconnect rc disconnect dc reassociate ra reattach rat signal_poll flush_bss monitor'
  if [[ "${COMP_WORDS[0]}" != source ]]; then
    local cur opts base
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    if [[ "$cur" == "-"* ]]; then
      opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} ${cur} --generate-bash-completion )
    elif test "${COMP_WORDS[1]}" = networks -a "${COMP_WORDS[2]}" = add ; then
	    case ${COMP_WORDS[COMP_CWORD-1]} in
		    --key_mgmt) opts='WPA-PSK SAE WPA-EAP IEEE8021X NONE WPA-NONE WPA-PSK-SHA256 WPA-EAP-SHA256';;
		    --pairwise) opts='CCMP TKIP NONE';;
		    --proto) opts='RSN WPA WPA2';;
		    --eap) opts='MD5 TLS WFA-UNAUTH-TLS MSCHAPV2 PEAP TTLS GTC OTP SIM LEAP PSK AKA FAST PAX SAKE GPSK WSC IKEV2 TNC PWD EKE';;
		    --ieee80211w) opts='0 1 2';;
		    --mode) opts='0 1 2';;
		    --frequency) opts='2412 2417 2422 2427 2432 2437 2442 2447 2452 2457 2462 2467 2472 5180 5200 5220 5240 5260 5280 5300 5320 5500 5520 5540 5560 5580 5600 5620 5640 5660 5680 5700';;
		    --*) opts='';;
		    *) opts=$( __get_links );;
	    esac
    elif __contains_word "${COMP_WORDS[1]}" $CMDS_REQUIRE_IFACE ; then
	    opts=$( __get_links )
    elif test "${COMP_WORDS[1]}" = networks && __contains_word "${COMP_WORDS[2]}" list ls disable enable remove select add ; then
	    opts=$( __get_links )
    elif test "${COMP_WORDS[1]}" = blob && __contains_word "${COMP_WORDS[2]}" list remove add get ; then
	    opts=$( __get_links )
    elif test "${COMP_WORDS[1]}" = interface && __contains_word "${COMP_WORDS[2]}" set ; then
	    opts=$( __get_links )
    else
      opts=$( ${COMP_WORDS[@]:0:$COMP_CWORD} --generate-bash-completion )
    fi
    COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
    return 0
  fi
}

type __get_links >& /dev/null || source /usr/share/bash-completion/completions/networkctl
complete -o bashdefault -o default -F _wpactl_bash_autocomplete wpactl
